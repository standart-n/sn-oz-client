// Generated by CoffeeScript 1.6.2
$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
      return conlole.log('design');
    }
  };
  return $.fn.snDesign = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var def;

      if (options == null) {
        options = {};
      }
      def = {
        levels: {},
        users: {},
        content: {},
        result: {}
      };
      $.extend(true, def, options);
      console.log('start...');
      $(this).data('sn', def);
      console.log('configuration...');
      $(this).snConf();
      console.log('layout...');
      $(this).snLayout();
      console.log('autoload...');
      return $(this).snEvents({
        href: '#autoload'
      });
    }
  };
  return $.fn.sn = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var def, sn;

      if (options == null) {
        options = {};
      }
      def = {
        href: 'none'
      };
      $.extend(true, def, options);
      sn = $(this).data('sn');
      sn.href = def.href + '/:';
      console.info('url: ' + sn.href);
      sn.levels = {
        one: sn.href.replace(/(.*)#(.*?)\/(.*)/, '$2'),
        two: sn.href.replace(/(.*)#(.*?)\/(.*?)\/(.*)/, '$3'),
        three: sn.href.replace(/(.*)#(.*?)\/(.*?)\/(.*?)\/(.*)/, '$4'),
        anchor: sn.href.replace(/(.*)\:(.*?)\/(.*)/, '$2')
      };
      switch (sn.levels.one) {
        case 'autoload':
          $(this).snModels('primary', {
            file: 'main.html'
          });
          $(this).snModels('side', {
            file: 'main.html'
          });
          $(this).snTriggers('switchSide', {
            link: 'main'
          });
          $(this).snTriggers('linksBar');
          $(this).snTriggers('linksSide');
          $(this).snTriggers('linksPrimary');
          $(this).snTriggers('switcherBar');
          $(this).snTriggers('switcherSide');
          sn.part = 'main';
          break;
        default:
          $('html,body').animate({
            scrollTop: 0
          }, 0);
          if (sn.levels.two === 'text') {
            if (sn.levels.one !== sn.part) {
              $(this).snTriggers('switchBar', {
                link: sn.levels.one
              });
              $(this).snModels('side', {
                file: sn.levels.one + '.html'
              });
              $(this).snTriggers('linksSide');
              $(this).snTriggers('switcherSide');
              sn.part = sn.levels.one;
              $(this).snTriggers('switchSide', {
                link: sn.levels.three
              });
              $(this).snModels('primary', {
                file: sn.levels.three + '.html'
              });
            }
          }
      }
      $(this).data('sn', sn);
      $(this).snEvents('anchor');
      return $(this).click();
    },
    anchor: function(options) {
      var e, height, sn;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      if (sn.levels.anchor !== '') {
        try {
          if ($('#anchor-' + sn.levels.anchor).length) {
            height = $('#anchor-' + sn.levels.anchor).offset().top - 87;
            if (height) {
              if ($('#side-' + sn.levels.anchor).length) {
                $(this).snTriggers('switchSide', {
                  'link': sn.levels.anchor
                });
              }
              return $('html,body').animate({
                scrollTop: height
              }, 'slow');
            }
          }
        } catch (_error) {
          e = _error;
          return console.error('anchor', e);
        }
      }
    }
  };
  return $.fn.snEvents = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    linksSide: function() {
      var _this;

      _this = this;
      return $('.side-box a').on('click', function() {
        return $(_this).snEvents({
          href: $(this).attr('href')
        });
      });
    },
    linksPrimary: function() {
      var _this;

      _this = this;
      return $('.primary-box a').on('click', function() {
        return $(_this).snEvents({
          href: $(this).attr('href')
        });
      });
    },
    linksBar: function() {
      var _this;

      _this = this;
      return $('a').on('click', function() {
        return $(_this).snEvents({
          href: $(this).attr('href')
        });
      });
    },
    switchBar: function(options) {
      var def;

      if (options == null) {
        options = {};
      }
      def = {
        link: 'main'
      };
      $.extend(def, options);
      $('.bar-button').removeClass('bar-button-active').removeClass('bar-button-hover').addClass('bar-button-normal');
      return $('#bar-' + def.link).removeClass('bar-button-normal').removeClass('bar-button-hover').addClass('bar-button-active').blur();
    },
    switchSide: function(options) {
      var def;

      if (options == null) {
        options = {};
      }
      def = {
        link: 'above'
      };
      $.extend(def, options);
      $('.side-box-link').removeClass('side-box-link-active').removeClass('side-box-link-hover').addClass('side-box-link-normal');
      return $('#side-' + def.link).removeClass('side-box-link-normal').removeClass('side-box-link-hover').addClass('side-box-link-active').blur();
    },
    switcherBar: function() {
      $('.bar-button').on('mouseover', function() {
        if (!$(this).hasClass('bar-button-active')) {
          return $(this).removeClass('bar-button-normal').addClass('bar-button-hover');
        }
      });
      return $('.bar-button').on('mouseleave', function() {
        if (!$(this).hasClass('bar-button-active')) {
          return $(this).removeClass('bar-button-hover').addClass('bar-button-normal');
        }
      });
    },
    switcherSide: function() {
      $('.side-box-link').on('mouseover', function() {
        if (!$(this).hasClass('side-box-link-active')) {
          return $(this).removeClass('side-box-link-normal').addClass('side-box-link-hover');
        }
      });
      return $('.side-box-link').on('mouseleave', function() {
        if (!$(this).hasClass('side-box-link-active')) {
          return $(this).removeClass('side-box-link-hover').addClass('side-box-link-normal');
        }
      });
    },
    spoiler: function() {
      return $('.primary-box-spoiler-caption').on('click', function() {
        if ($(this).hasClass('primary-box-spoiler-caption-open')) {
          $(this).removeClass('primary-box-spoiler-caption-open').addClass('primary-box-spoiler-caption-close');
        } else {
          $(this).removeClass('primary-box-spoiler-caption-close').addClass('primary-box-spoiler-caption-open');
        }
        return $(this).parent('.primary-box-spoiler').children('.primary-box-spoiler-body').each(function() {
          if ($(this).hasClass('spoiler-status-open')) {
            return $(this).removeClass('spoiler-status-open').addClass('spoiler-status-close').hide();
          } else {
            return $(this).removeClass('spoiler-status-close').addClass('spoiler-status-open').show();
          }
        });
      });
    }
  };
  return $.fn.snTriggers = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
      $(this).snConf('main');
      $(this).snConf('theme');
      $(this).snConf('css');
      $(this).snConf('js');
      return $(this).snConf('settings');
    },
    main: function() {
      var sn;

      sn = $(this).data('sn');
      return $.ajax({
        url: 'conf/main.json',
        async: false,
        dataType: 'json',
        success: function(s) {
          $.extend(sn, s);
          return $(this).data('sn', sn);
        }
      });
    },
    theme: function() {
      var sn;

      sn = $(this).data('sn');
      return $.ajax({
        url: 'conf/themes.json',
        async: false,
        dataType: 'json',
        success: function(s) {
          if (s[sn.theme.name]) {
            $.extend(sn.theme, s[sn.theme.name]);
            sn.theme.enable = true;
          } else {
            sn.theme.enable = false;
          }
          return $(this).data('sn', sn);
        }
      });
    },
    css: function() {
      var sn;

      sn = $(this).data('sn');
      if (sn.theme.css) {
        return $.each(sn.theme.css, function(i) {
          var head, link;

          head = document.getElementsByTagName('head')[0];
          link = document.createElement('link');
          link.rel = 'stylesheet';
          link.type = 'text/css';
          link.href = this;
          return head.appendChild(link);
        });
      }
    },
    js: function() {
      var sn;

      sn = $(this).data('sn');
      if (sn.theme.js) {
        return $.each(sn.theme.js, function(i) {
          return $.getScript(this);
        });
      }
    },
    settings: function() {}
  };
  return $.fn.snConf = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var main, sn;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      main = new EJS({
        url: 'layout/' + sn.region.name + '/main.html',
        ext: '.html'
      }).render({
        header: new EJS({
          url: 'layout/' + sn.region.name + '/header.html',
          ext: '.html'
        }).render({
          caption: sn.region.caption
        }),
        content: new EJS({
          url: 'layout/' + sn.region.name + '/content.html',
          ext: '.html'
        }).render()
      });
      return $(this).snModels('main', {
        text: main
      });
    }
  };
  return $.fn.snLayout = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    main: function(options) {
      var def, sn, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      sn = $(this).data('sn');
      def = {
        elem: '#main',
        type: 'main',
        text: ''
      };
      $.extend(def, options);
      return $(def.elem).html(def.text);
    },
    primary: function(options) {
      var def, sn, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      sn = $(this).data('sn');
      def = {
        elem: '#primary-content',
        type: 'primary'
      };
      $.extend(def, options);
      if (def.file != null) {
        return $(this).snModels('load', def, function(s) {
          $(def.elem).html($(_this).snWiki('primary', {
            text: s
          }));
          return $(_this).snTriggers('spoiler');
        });
      } else {
        if (def.text != null) {
          $(def.elem).html($(_this).snWiki('primary', {
            text: def.text
          }));
          return $(_this).snTriggers('spoiler');
        }
      }
    },
    side: function(options) {
      var def, sn, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      sn = $(this).data('sn');
      def = {
        elem: '#side-content',
        type: 'side'
      };
      $.extend(def, options);
      if (def.file != null) {
        return $(this).snModels('load', def, function(s) {
          return $(def.elem).html($(_this).snWiki('side', {
            text: s
          }));
        });
      } else {
        if (def.text != null) {
          return $(def.elem).html($(_this).snWiki('side', {
            text: def.text
          }));
        }
      }
    },
    load: function(options, callback) {
      var def, sn;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        url: '',
        type: 'view',
        file: 'news.html'
      };
      $.extend(def, options);
      switch (def.type) {
        case 'view':
          def.url = 'view/' + def.file;
          break;
        case 'primary':
          def.url = 'content/' + sn.region.name + '/' + def.file;
          break;
        case 'side':
          def.url = 'content/' + sn.region.name + '/side_' + def.file;
      }
      return $.ajax({
        url: def.url,
        async: false,
        cache: false,
        dataType: 'html',
        success: function(text) {
          if (text != null) {
            if (callback) {
              return callback(text);
            }
          }
        }
      });
    }
  };
  return $.fn.snModels = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    primary: function(options) {
      var def, text, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      def = {
        text: ''
      };
      $.extend(true, def, options);
      text = def.text;
      text = $(_this).snWiki('tags', {
        text: text
      });
      text = $(_this).snWiki('formating', {
        text: text
      });
      text = $(_this).snWiki('headings', {
        text: text
      });
      text = $(_this).snWiki('externalLinks', {
        text: text
      });
      text = $(_this).snWiki('fileLinks', {
        text: text
      });
      text = $(_this).snWiki('internalLinks', {
        text: text
      });
      text = $(_this).snWiki('mailTo', {
        text: text
      });
      text = $(_this).snWiki('photo', {
        text: text
      });
      text = $(_this).snWiki('image', {
        text: text
      });
      text = $(_this).snWiki('fonts', {
        text: text
      });
      text = $(_this).snWiki('anchor', {
        text: text
      });
      text = $(_this).snWiki('indPrimary', {
        text: text
      });
      text = $(_this).snWiki('spoiler', {
        text: text
      });
      text = $(_this).snWiki('spaces', {
        text: text
      });
      return text;
    },
    side: function(options) {
      var def, text, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      def = {
        text: ''
      };
      $.extend(true, def, options);
      text = def.text;
      text = $(_this).snWiki('tags', {
        text: text
      });
      text = $(_this).snWiki('formating', {
        text: text
      });
      text = $(_this).snWiki('headings', {
        text: text
      });
      text = $(_this).snWiki('externalLinks', {
        text: text
      });
      text = $(_this).snWiki('fileLinks', {
        text: text
      });
      text = $(_this).snWiki('internalLinks', {
        text: text
      });
      text = $(_this).snWiki('mailTo', {
        text: text
      });
      text = $(_this).snWiki('photo', {
        text: text
      });
      text = $(_this).snWiki('image', {
        text: text
      });
      text = $(_this).snWiki('fonts', {
        text: text
      });
      text = $(_this).snWiki('anchor', {
        text: text
      });
      text = $(_this).snWiki('gismeteo', {
        text: text
      });
      text = $(_this).snWiki('indSide', {
        text: text
      });
      text = $(_this).snWiki('sideMenu', {
        text: text
      });
      text = $(_this).snWiki('spaces', {
        text: text
      });
      return text;
    },
    formating: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/'''''(.*?)'''''/mg, "<i><b>$1</b></i>").replace(/'''(.*?)'''/mg, "<b>$1</b>").replace(/''(.*?)''/mg, "<i>$1</i>");
    },
    headings: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      text = text.replace(/======(.*?)======\n/mg, "<h6>$1</h6>");
      text = text.replace(/=====(.*?)=====\n/mg, "<h5>$1</h5>");
      text = text.replace(/====(.*?)====\n/mg, "<h4>$1</h4>");
      text = text.replace(/===(.*?)===\n/mg, "<h3>$1</h3>");
      text = text.replace(/==(.*?)==\n/mg, "<h2>$1</h2>");
      text = text.replace(/======(.*?)======/mg, "<h6>$1</h6>");
      text = text.replace(/=====(.*?)=====/mg, "<h5>$1</h5>");
      text = text.replace(/====(.*?)====/mg, "<h4>$1</h4>");
      text = text.replace(/===(.*?)===/mg, "<h3>$1</h3>");
      return text = text.replace(/==(.*?)==/mg, "<h2>$1</h2>");
    },
    externalLinks: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[(https?:\/\/[a-zA-Z0-9\-\.\/\?%\#_]+) (.*?)\]/mg, '<a class="wiki-link" href="$1" target="_blank">$2</a>').replace(/\[(https?:\/\/[a-zA-Z0-9\-\.\/\?%\#_]+)\]/mg, '<a class="wiki-link" href="$1" target="_blank">$1</a>');
    },
    fileLinks: function(options) {
      var def, sn, text;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[file:([a-zA-Z0-9\-\.\/\?%\#_]+) (.*?)\]/mg, '<a class="wiki-link" href="http://oz.st-n.ru/publish/files/' + sn.region.name + '/$1" target="_blank">$2</a>').replace(/\[file:([a-zA-Z0-9\-\.\/\?%\#_]+)\]/mg, '<a class="wiki-link" href="http://oz.st-n.ru/publish/files/' + sn.region.name + '/$1" target="_blank">$1</a>');
    },
    mailTo: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[email:([a-zA-Z0-9@\-\.\/\?%\#_]+) (.*?)\]/mg, '<a class="wiki-link" href="mailto:$1">$2</a>').replace(/\[email:([a-zA-Z0-9@\-\.\/\?%\#_]+)\]/mg, '<a class="wiki-link" href="mailto:$1">$1</a>');
    },
    photo: function(options) {
      var def, sn, text;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[photo:([a-zA-Z0-9\-\.\/\?%\#_]+)\]/mg, '<img align="center" width="100%" src="http://oz.st-n.ru/publish/photo/' + sn.region.name + '/$1">');
    },
    image: function(options) {
      var def, sn, text;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[image:([a-zA-Z0-9\-\.\/\?%\#_]+) left\]/mg, '<img align="center" class="wiki-image-left" src="http://oz.st-n.ru/publish/photo/' + sn.region.name + '/$1">').replace(/\[image:([a-zA-Z0-9\-\.\/\?%\#_]+) right\]/mg, '<img align="center" class="wiki-image-right" src="http://oz.st-n.ru/publish/photo/' + sn.region.name + '/$1">').replace(/\[image:([a-zA-Z0-9\-\.\/\?%\#_]+)\]/mg, '<img align="center" src="http://oz.st-n.ru/publish/photo/' + sn.region.name + '/$1">');
    },
    fonts: function(options) {
      var def, sn, text;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[\[color:([a-zA-Z0-9\-\.\/\?%\#_]+)\](.*?)\]/mg, '<font style="color:$1">$2</font>').replace(/\[\[color:red\](.*?)\]/mg, '<font style="color:#ff0000">$1</font>').replace(/\[\[color:silver\](.*?)\]/mg, '<font style="color:#666">$1</font>');
    },
    internalLinks: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[#([a-zA-Z0-9\-\.\/\?%\#_\:]+) (.*?)\]/mg, '<a class="wiki-link" href="#$1">$2</a>').replace(/\[#([a-zA-Z0-9\-\.\/\?%\#_\:]+)\]/mg, '<a class="wiki-link" href="#$1">$1</a>');
    },
    indPrimary: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/<<<\n/g, '<div class="primary-box-outer"><div class="primary-box wiki-text">').replace(/>>>\n/g, '</div></div>').replace(/<<</g, '<div class="primary-box-outer"><div class="primary-box wiki-text">').replace(/>>>/g, '</div></div>');
    },
    indSide: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/<<<\n/g, '<div class="side-box-outer"><div class="side-box wiki-text">').replace(/>>>\n/g, '</div></div>').replace(/<<</g, '<div class="side-box-outer"><div class="side-box wiki-text">').replace(/>>>/g, '</div></div>');
    },
    tags: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/<(.*?)>\n/g, '<$1>').replace(/<(.*?)>\r/g, '<$1>').replace(/<(.*?)>\r\n/g, '<$1>').replace(/<\/(.*?)>\n/g, '</$1>').replace(/<\/(.*?)>\r/g, '</$1>').replace(/<\/(.*?)>\r\n/g, '</$1>').replace(/<(.*?)>\n/g, '<$1>').replace(/<(.*?)>\r/g, '<$1>').replace(/<(.*?)>\r\n/g, '<$1>').replace(/<\/(.*?)>\n/g, '</$1>').replace(/<\/(.*?)>\r/g, '</$1>').replace(/<\/(.*?)>\r\n/g, '</$1>');
    },
    anchor: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[anchor:([a-zA-Z0-9\-\.\/\?%\#_]+)\]\n/g, '<a id="anchor-$1"></a>').replace(/\[anchor:([a-zA-Z0-9\-\.\/\?%\#_]+)\]/g, '<a id="anchor-$1"></a>');
    },
    sideMenu: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\[menu:#([a-zA-Z0-9\-\.\/\?%\#_\:]+) ([a-zA-Z0-9\-\.\/\?%\#_]+) (.*?)\]/mg, '<a class="side-box-link side-box-link-normal" href="#$1" id="side-$2">$3</a>');
    },
    gismeteo: function(options) {
      var def, sn, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      sn = $(this).data('sn');
      text = def.text;
      return text.replace(/\[gismeteo\]/mg, '<iframe src="http://oz.st-n.ru/gismeteo/' + sn.region.name + '/" width="98%" height="160" scrolling="no" marginheight="0" marginwidth="0" frameborder="0"></iframe>');
    },
    spoiler: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/<<\[(.+)\]\n/g, '<div class="primary-box-spoiler">' + '<a href="#spoiler" class="wiki-link primary-box-spoiler-caption">$1</a>' + '<div class="primary-box-spoiler-body">').replace(/>>\n/g, '</div></div>').replace(/<<\[(.+)\]/g, '<div class="primary-box-spoiler">' + '<a href="#spoiler" class="wiki-link primary-box-spoiler-caption">$1</a>' + '<div class="primary-box-spoiler-body">').replace(/>>/g, '</div></div>');
    },
    spaces: function(options) {
      var def, text;

      if (options == null) {
        options = {};
      }
      def = {
        text: ''
      };
      $.extend(def, options);
      text = def.text;
      return text.replace(/\]\n/g, "]").replace(/\n\n/g, "<br><br>").replace(/\n/g, "<br>").replace(/<br>\n<div class=\"primary-box-outer\">/g, "<div class=\"primary-box-outer\">").replace(/<br><div class=\"primary-box-outer\">/g, "<div class=\"primary-box-outer\">");
    }
  };
  return $.fn.snWiki = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      return $(this).on('click', function() {
        var sn;

        sn = $(_this).data('sn');
        if (sn.levels.one === 'users') {
          switch (sn.levels.two) {
            case 'signin':
              return $(_this).snSignin();
            case 'help':
              return $(_this).snSignin('help');
          }
        }
      });
    }
  };
  $.fn.snUsers = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
  return $('#sn').snUsers();
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var def, sn;

      if (options == null) {
        options = {};
      }
      sn = $(this).data('sn');
      def = {
        view: {
          signin: new EJS({
            url: 'view/signin.html',
            ext: '.html'
          }).render({
            signinFormEnter: new EJS({
              url: 'view/signinFormEnter.html',
              ext: '.html'
            }).render(),
            signinFormReg: new EJS({
              url: 'view/signinFormReg.html',
              ext: '.html'
            }).render(),
            signinBlockHelp: new EJS({
              url: 'view/signinBlockHelp.html',
              ext: '.html'
            }).render()
          }),
          signinSide: new EJS({
            url: 'view/signinSide.html',
            ext: '.html'
          }).render()
        }
      };
      $.extend(true, def, options);
      $(this).snModels('primary', {
        text: def.view.signin
      });
      $(this).snModels('side', {
        text: def.view.signinSide
      });
      $(this).snTriggers('switchSide', {
        link: sn.levels.two
      });
      return $(this).snSignin('triggers', def);
    },
    help: function() {
      return $('#signin-block-help').show();
    },
    triggers: function(options) {
      var _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      $('.signin-input').on('focus', function() {
        if ($(this).val() === $(this).data('def-value') || $(this).val() === '') {
          $(this).removeClass('signin-input-blur');
          $(this).addClass('signin-input-focus');
          $(this).val('');
          return $(this).select();
        }
      });
      $('.signin-input').on('blur', function() {
        if ($(this).val() === $(this).data('def-value') || $(this).val() === '') {
          $(this).removeClass('signin-input-focus');
          $(this).addClass('signin-input-blur');
          return $(this).val($(this).data('def-value'));
        }
      });
      $('#signin-form-enter').on('submit', function(e) {
        e.preventDefault();
        return $(_this).snEnter('checkEnterForm');
      });
      $('#signin-button-enter').on('click', function(e) {
        e.preventDefault();
        return $(_this).snEnter('checkEnterForm');
      });
      $('#signin-form-reg').on('submit', function(e) {
        e.preventDefault();
        return $(_this).snRegistration('checkRegForm');
      });
      $('#signin-button-reg').on('click', function(e) {
        e.preventDefault();
        return $(_this).snRegistration('checkRegForm');
      });
      return $('.signin-type-reg').on('keyup', function() {
        var check, __this;

        __this = this;
        check = $(_this).snValidation('checkField', {
          type: $(this).data('check-type'),
          value: $(this).val(),
          caption: $(this).data('def-value')
        });
        return $('.signin-form-check').each(function() {
          if ($(this).data('check-type') === $(__this).data('check-type')) {
            if (check.error != null) {
              if ($(this).hasClass('signin-form-check-clear')) {
                $(this).removeClass('signin-form-check-clear');
              }
              if (check.error) {
                $(this).removeClass('signin-form-check-true');
                return $(this).addClass('signin-form-check-false');
              } else {
                $(this).removeClass('signin-form-check-false');
                return $(this).addClass('signin-form-check-true');
              }
            }
          }
        });
      });
    }
  };
  return $.fn.snSignin = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    checkRegForm: function(options) {
      var def, _this;

      if (options == null) {
        options = {};
      }
      def = {
        error: false
      };
      _this = this;
      $.extend(true, def, options);
      $('.signin-warning').hide();
      $('.signin-form-warning').hide();
      $('.signin-type-reg').each(function() {
        var check, __this;

        __this = this;
        check = $(_this).snValidation('checkField', {
          type: $(this).data('check-type'),
          value: $(this).val(),
          caption: $(this).data('def-value')
        });
        if (check.error !== void 0) {
          if (check.error) {
            def.error = true;
          }
        }
        $('.signin-warning').each(function() {
          if ($(this).data('check-type') === $(__this).data('check-type')) {
            if (check.error !== void 0) {
              if (check.error) {
                return $(this).html(check.start + ' ' + check.caption + ' ' + check.exp).show();
              }
            }
          }
        });
        $('.signin-form-warning').each(function() {
          if ($(this).data('check-type') === $(__this).data('check-type')) {
            if (check.error !== void 0) {
              if (check.error) {
                return $(this).show();
              }
            }
          }
        });
        return $('.signin-form-check').each(function() {
          if ($(this).data('check-type') === $(__this).data('check-type')) {
            if (check.error !== void 0) {
              if ($(this).hasClass('signin-form-check-clear')) {
                $(this).removeClass('signin-form-check-clear');
              }
              if (check.error) {
                $(this).removeClass('signin-form-check-true');
                return $(this).addClass('signin-form-check-false');
              } else {
                $(this).removeClass('signin-form-check-false');
                return $(this).addClass('signin-form-check-true');
              }
            }
          }
        });
      });
      console.info('afterCheckRegForm', def);
      $(this).snRegistration('afterCheckRegForm', def);
      return false;
    },
    afterCheckRegForm: function(options) {
      var def;

      if (options == null) {
        options = {};
      }
      def = {
        error: false
      };
      $.extend(true, def, options);
      if (def.error) {
        return console.warn('ошибки при проверке формы регистрации');
      } else {
        alert('bez oshibok');
        console.info('regOnServer');
        return $(this).snRegistration('regOnServer');
      }
    },
    regOnServer: function(options) {
      var def, sn, _this;

      if (options == null) {
        options = {};
      }
      def = {
        debug: false,
        type: 'jsonp',
        firstname: $('#signin-input-firstname').val(),
        lastname: $('#signin-input-lastname').val(),
        patronymic: $('#signin-input-patronymic').val(),
        email: $('#signin-input-email').val(),
        phone: $('#signin-input-phone').val(),
        company: $('#signin-input-company').val(),
        post: $('#signin-input-post').val(),
        error: false
      };
      _this = this;
      $.extend(true, def, options);
      if (def.debug) {
        def.type = 'text';
      }
      sn = $(this).data('sn');
      return $.ajax({
        url: 'http://oz.st-n.ru/server-dev/?callback=?',
        async: false,
        type: 'POST',
        data: {
          action: 'registration',
          region: sn.region.name,
          theme: sn.theme.name,
          firstname: def.firstname,
          lastname: def.lastname,
          patronymic: def.patronymic,
          email: def.email,
          phone: def.phone,
          company: def.company,
          post: def.post
        },
        dataType: def.type,
        timeout: 10000,
        success: function(s) {
          $.extend(true, sn.result, s.registration);
          if (def.debug) {
            alert(s);
          }
          $(_this).data('sn', sn);
          if (sn.result.alert) {
            alert(sn.result.alert);
          }
          console.log('afterCheckRegFormOnServer', s);
          return $(_this).snRegistration('afterCheckRegFormOnServer', s);
        },
        error: function(XMLHttpRequest, textStatus, error) {
          return console.error('ajax:', textStatus, error);
        }
      });
    },
    afterCheckRegFormOnServer: function(options) {
      var def, sn;

      if (options == null) {
        options = {};
      }
      def = {
        'error': false,
        'start': 'В поле'
      };
      $.extend(true, def, options);
      sn = $(this).data('sn');
      if (sn.result.reg) {
        $(this).snRegistration('afterSuccessReg', def);
      }
      if (!sn.result.reg) {
        def.error = true;
        if (sn.result.valid) {
          return $.each(sn.result.valid, function(field, check) {
            $('.signin-warning').each(function() {
              if ($(this).data('check-type') === field) {
                if (check.error !== void 0) {
                  if (check.error) {
                    return $(this).html(def.start + ' ' + check.def + ' ' + check.exp).show();
                  }
                }
              }
            });
            $('.signin-form-warning').each(function() {
              if ($(this).data('check-type') === field) {
                if (check.error !== void 0) {
                  if (check.error) {
                    return $(this).show();
                  }
                }
              }
            });
            return $('.signin-form-check').each(function() {
              if ($(this).data('check-type') === field) {
                if (check.error !== void 0) {
                  if ($(this).hasClass('signin-form-check-clear')) {
                    $(this).removeClass('signin-form-check-clear');
                  }
                  if (check.error) {
                    return $(this).removeClass('signin-form-check-true').addClass('signin-form-check-false');
                  } else {
                    return $(this).removeClass('signin-form-check-false').addClass('signin-form-check-true');
                  }
                }
              }
            });
          });
        }
      }
    }
  };
  return $.fn.snRegistration = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    checkEnterForm: function(options) {
      var sn;

      if (options == null) {
        options = {};
      }
      sn = $(this).data(sn);
      alert('enter');
      console.info('sn', sn);
      return false;
    }
  };
  return $.fn.snEnter = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
      return $(this).snValidation('checkField', options);
    },
    checkField: function(options) {
      var def, value;

      if (options == null) {
        options = {};
      }
      def = {
        type: 'post',
        value: '',
        caption: '',
        error: true,
        start: 'В поле',
        exp: ''
      };
      $.extend(true, def, options);
      value = def.value.toString();
      switch (def.type) {
        case 'firstname':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/^([а-я\-\.]+)$/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'lastname':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/^([а-я\-\.]+)$/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'patronymic':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/^([а-я\-\.]+)$/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'email':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/\b[\w\.-]+@[\w\.-]+\.\w{2,4}\b/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'phone':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/\+?\d{1,3}(?:\s*\(\d+\)\s*)?(?:(?:\-\d{1,3})+\d|[\d\-]{4,}|(?:\s\d{1,3})+\d)/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'company':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/^([а-яa-z0-9\-\.\,\'\'\<\>\ ]+)$/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
          break;
        case 'post':
          if (value === '' || value === def.caption) {
            def.exp = 'ничего не указано!';
          } else {
            if (value.length < 3) {
              def.exp = 'слишком короткое значение!';
            } else {
              if (value.length > 28) {
                def.exp = 'слишком длинное значение!';
              } else {
                if (!value.match(/^([а-яa-z0-9\-\.\,\'\'\ ]+)$/gi)) {
                  def.exp = 'некорректное значение!';
                } else {
                  def.error = false;
                }
              }
            }
          }
      }
      if (!def.error) {
        console.warn('validatation', def.type, def.exp);
      }
      return def;
    }
  };
  return $.fn.snValidation = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      return $(this).on('click', function() {
        var sn;

        sn = $(_this).data('sn');
        if (sn.levels.two === 'horoscope') {
          return alert('horoscope');
        }
      });
    },
    load: function() {
      var def, sn;

      def = {
        'el': '#primary-content'
      };
      $.extend(true, def, options);
      sn = $(this).data('sn');
      return $.ajax({
        url: 'http://oz.st-n.ru/horoscope/?callback=?',
        dataType: 'jsonp',
        success: function(s) {
          if (s.hscope) {
            return $.each(s.hscope, function(key, value) {
              if (value.description) {
                return $('#hscope-description-' + key).html(value.description);
              }
            });
          }
        }
      });
    }
  };
  return $.fn.snHoroscope = function(sn) {
    if (sn == null) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});
